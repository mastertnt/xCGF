name: Architecture Auto-Update

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  generate_architecture:
    if: contains(github.event.issue.labels.*.name, 'architecture')
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install requests

      - name: Define branch name
        id: branch
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
        # for safety force bash (some self-hosted runners default to sh/dash)
        shell: bash
        run: |
          set -euo pipefail

          # assure variables
          ISSUE_NUMBER="${ISSUE_NUMBER}"
          ISSUE_TITLE="${ISSUE_TITLE:-architecture}"

          # try to transliterate non-ascii -> ascii (if iconv présent),
          # sinon on continue avec la chaîne originale
          SAFE_TITLE="$(printf "%s" "$ISSUE_TITLE" | iconv -c -t ASCII//TRANSLIT 2>/dev/null || printf "%s" "$ISSUE_TITLE")"

          # lowercase
          SAFE_TITLE="$(printf "%s" "$SAFE_TITLE" | tr '[:upper:]' '[:lower:]')"

          # remplacer tout caractère non alphanumérique par un tiret,
          # compacter les tirets consécutifs, supprimer tirets de tête/queue
          SAFE_TITLE="$(printf "%s" "$SAFE_TITLE" | sed 's/[^a-z0-9]/-/g; s/-\+/-/g; s/^-//; s/-$//')"

          # tronquer à 30 caractères (bash substring)
          SAFE_TITLE="${SAFE_TITLE:0:30}"

          # fallback si tout est filtré
          if [ -z "$SAFE_TITLE" ]; then
            SAFE_TITLE="architecture"
          fi

          BRANCH_NAME="issue-${ISSUE_NUMBER}-${SAFE_TITLE}"

          # exporter en output GitHub Actions (méthode recommandée)
          echo "branch_name=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"

          # debug (facultatif — retirez les deux lignes en prod)
          echo "Computed branch name: ${BRANCH_NAME}"
      
      - name: Create or switch to branch
        run: |
          git fetch origin
          if git show-ref --verify --quiet "refs/remotes/origin/${{ steps.branch.outputs.branch_name }}"; then
            echo "Branch already exists. Checking it out."
            git checkout ${{ steps.branch.outputs.branch_name }}
            git pull origin ${{ steps.branch.outputs.branch_name }}
          else
            echo "Creating new branch."
            git checkout -b ${{ steps.branch.outputs.branch_name }}
          fi

      - name: Run LLM-based generator
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          REPO_NAME: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python llm_scripts/call_llm_task.py --config=llm_scripts/architect_design.json

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Auto-update from issue #${{ github.event.issue.number }}"
            git push origin ${{ steps.branch.outputs.branch_name }}
          fi
